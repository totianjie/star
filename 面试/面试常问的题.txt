css3:
	圆角 radius
	阴影 shadow
	渐变 linear-gradient
	transition:
	transitionend---事件
	transform:
		rotate	translate 	scale 	skew origin 
		animation keyfrom 
	透视:transform:perspective(n)
	转3D:transform-style: flat|preserve-3d;		加给父级

	动画 animation   @keyframes
		animation-name  动画名
		aniation-delay  动画开始时间
		animation-timing-function ---ease  linear
		infinite  无限运动   默认是一次
		alternate  动画轮流反向播放


html5:
	视频：vedio
	音频：audio
	语义化标签：
		header
		footer
		nav
		section	区块
		article	文章
		aside 侧栏
	localStorage  本地存储  5M
	touchstart	touchmove touchend
	var oTouch=ev.targetTouches[]; 有多少手指按下了
	WebWorker   多线  所比较耗费性能的放入子级程   
		注意:
		不能跨域,需要放到服务器环境
		WebWorker的子线程中不能操作BOM和DOM，先操作在主线程
		DOM元素不能传递
		子线程中this就是worker
		主线程可以开子线程
			子线程能不能再开线程？
				子线程不能再开线程
		<body>
			<input type="button" value="按钮">
			<script type="text/javascript">
				var oBtn = document.querySelector('input');
				oBtn.onclick = function(){
					var w1 = new Worker('3.js');		使用worker      3.js就是子线程了
					w1.postMessage(40);					发送数据给子线程
					w1.onmessage = function(ev){		接收数据
						alert(ev.data);
					};
				};
			</script>
		</body>



			3.js


				function fn(n){
					if(n==1){
						return 1;
					}else if(n==2){
						return 1;
					}else{
						return fn(n-1)+fn(n-2);
					}
				}
				this.onmessage = function(ev){  接收主线程发送过来的数据
					var n = ev.data;
					var result = fn(n);
					this.postMessage(result);   发送数据出
				};
	-----------------------------------------------------------------
	var obj=document.getElementsByClassName('可以放多个class会全部返回');  兼容IE9+ firefox chrome

	var oDiv=document.querySelectorAll('oBox ul li.on input');//出来的是一组	

	var oDiv=document.querySelector('oBox ul li');//默认获取一组中的第一个元素  获取第一个li

	兼容 firefox chrome
	oBox.classList.add('class名')	添加class
	oBox.classList.remove('class名')	删除class
	oBox.classListcontains('class名');	查看某个元素是否有class  返回的是true false
	oBox.classList.toggle('class名');	切换class	如果有就删除  没有就添加

-----------------------------------------------------------------------------------------
es6:
	const  块级作用域 常量 定义了不可在修改
	let 	块级作用域  不可在重新定义  可以修改
	函数给默认参数
	forEach	 循环数组   arr.forEach(function(item,index){}) 不兼容IE  可在prototype判断在做处理
	()=>{}	this是window   没有arguments   可以用  ...args
	map
	模块化  export default 导出    import 名字 from 文件
	面向对象	
		class Preson{  //类
			constructor(name,age){
				this.name=name;
				this.age=age;
			}
			this.showName(){
				return this.name;
			}
		}

		class Worker extends Preson {      
			constructor(name,age,job){
				super(name,age);  掉用父级构造
				this.job=job
			}
		}
	字符串拼接   `${变量}` 可换行   之前  '+变量+'    

	解构赋值  
		var [a,b,c]=[1,2,3];
		var {a,b,c}={a:1,b:2,c:3}  跟顺序无关

		模式匹佩
			var [a,[b,c],d]=[1,[2,3],4];  左右结构一定要一样
			var [a,{b,c},d]=[1,{}]
		解构可以给默认值
			var {time=12,id=2}={}
	扩展运算符
		var arr=[1,2,3];
		循环复制
		var arr2=Array.from(arr);
		var arr2=[...arr]

		function show(...args){
			//arguments  实参参数数组   但没有数组的方法  pop  push  这些都没有
			args  就解决了这个问题   它就变成了一个数组
		}
		show(1,2,3)
	promise
		var p1=new promise(function(resolve,rejecte){}).catch(function(){//错误});
		p1.then(function(res){},function(err){});
		Promise.all([p1,p2]).then(function(){},function(){});  两个成功后才会走成功
		Promise.race([p1,p2]).then(function(){},function(){});  谁先到先执行谁

	set
		var set=new Set();			不可有重复的值出现  出现将覆盖
		set.add(values);			添加
		set.has(window); // true    判断是否有该值
		set.size;   //返回length
		set.clear();   清空
		set.delete(values);  删除某一个
------------------------------------------------------
兼容问题

获取非行间样式
	function getStyle(obj,name){
		if(obj.currentStyle){
        	return obj.currentStyle[name];
    	}else{
        	return getComputedStyle(obj,false)[name];
    	}
	}
获取class
	function getByClass(obj,sClass){
	    if(obj.getElementsByClassName){ //兼容IE9+ chrome FF
	        return obj.getElementsByClassName(sClass);
	    }else{
	        var aEle=obj.getElementsByTagName('*');
	
	        var arr=[];
	
	        for(var i=0; i<aEle.length; i++){
	            //"red green"
	            var aClass=aEle[i].className.split(' '); //['red','green']
	            //sClass ->  'red'
	            if(findInArr(sClass,aClass)){
	                arr.push(aEle[i]);
	            }
	        }
	        return arr;
	    }
	}

dom节点
	下一个兄弟节点
	obj.nextElementSibling || obj.nextSibling;
	上一个兄弟节点
	obj.previousElementSibling || obj.previousSibling;
	第一个子节点
	obj.firstElementChild || obj.firstChild;
	最后一个子级点
	obj.laseElementChild || obj.laseChild;
滚动条高度
	document.documentElement.scrollTop || document.body.scrollTop;
事件绑定
	function addEvent(obj,sEv,fn){
		if(obj.addEventListener){
			//IE9+ chrome  FF
			obj.addEventListener(sEv,fn,false);
		}else{
			/IE10 9 8 7..
			obj.attachEvent('on'+sEv,fn);
		}
	}
解绑定
	function removeEvent(obj,sEv,fn){
		if(obj.removeEventListener){
			obj.removeEventListener(sEv,fn,false);
		}else{
			detachEvent('on'+sEv,fn);
		}
	}
滚轮事件
 	判断浏览器
domReady
	function domReady(fn){
		if(document.addEventListener){
			//IE9++ chrome FF
			document.addEventListener('DOMContentLoaded',function(){
				fn && fn();
			},false);
		}else{
			document.attachEvent('onreadystatechange',function(){
				if(document.readyState){
					fn && fn();
				}
			}); 
		}
	}
实时统计字数
	function fnInput(obj,fn){
		if(window.navigator.userAgent.indexOf('MSIE 9.0') > 0){
			let timer=null;
			//IE9删除问题解决
			obj.onfocus=function(){
				timer=setInteral(function(){
					fn && fn();
				},0);
			}
			obj.onblur=function(){
				clearInterval(timer);
			};
		}else{
			//oninput IE9+ chrome FF        onpropertychange IE10 9 8 7
			obj.oninput=onpropertychange=function(){
				fn && fn();
			}
		}
	}
ev事件对象   储存了事件详细信息
	ev IE9+ chrome FF    event   兼容IE系chrome
	let oEvent=ev || event;
pageX跟pageY  IE9+  chrome  FF

事件委托 (兼容性同上)
	let target=oEvent.srcElement || oEvent.target;
移入移出事件
	onmouseover onmouseout  在IE下移入子级也 算移出
	onmouseleave onmouseenter  不支持冒泡  事件委托就是利用冒泡的原理

阻止默认行为
	return false;   在事件绑定中失效
	用oEvent.preventDefault && oEvent.preventDefault();  兼容IE9++
ajax
	if(window.XMLHttpRequest){
        var oAjax=new XMLHttpRequest();     //不兼容 IE6
    }else{
        var oAjax=new ActiveXObject('Microsoft.XMLHTTP');//兼容 IE6 7 8
    }
	
	
