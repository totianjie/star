笔记
SVN 			集中式代码管理工具
	checkout下来
	update
	该代码
	update
	commit
GIT 			分布式代码管理工具
	Git GUI 		图形界面
	Git Bash 		命令行(linux)
	git安装：无限下一步
	验证安装成功: 右键菜单出现git选项
		 	git --version 			检测git版本
	github
		官网:https://github.com/
		准备两个邮箱	
			qq
			sina
	
		注册：
			username 		被占用
			email 	 		
			password 		以字母开头，包含数字
===========================================================
	设置
		点击头像=》settings=》设置邮箱
===========================================================
	SSH Key 	密钥
		点击头像-》settings-》SSH and GPG Keys-》New SSH key
			输入 title
				输入你的名字
			输入 key

	本地生成ssh key
		打开git bash
			ssh-keygen -t rsa -C "主邮箱" 		一路回车
			密钥生成成功
		当前用户目录下有	.ssh文件夹
				id_rsa
				id_rsa.pub 				√
				切记，千万不要用任何编辑器打开。用记事本打开
				把内容复制到key输入框中
				点击add
===========================================================
	配置用户名和邮箱	
		查看配置
		git config -l

		设置name
		git config --global user.name "名字"
		设置email
		git config --global user.email "主邮箱"
============================================================
	可以玩github了。
============================================================	
	1.第一次创建（本地项目上传到github）
		github中创建项目
			点击+   -》 	点击New repository
				输入名字
				输入描述
				选择是否开源
					public 				开源 			√
					private 			私有 			收费
				点击 	Create repository
		本地创建项目
			项目名一定要一样

			官方推荐每个项目包含以下文件
				README.md 		说明 	√
				LICENSE 	开源许可证 	不需要你管		
				.gitignore	忽略上传		√

			创建README 文件
			在项目目录	打开git bash
				输入
					git init	初始化
					git add README.md   文件后缀可以随意
					git commit -m "first commit"
					git remote add origin https://github.com/itwenqiang/test.git（自己文件烤贝）
					git push -u origin master
				验证身份
					简易不输入username，输入主邮箱
			git status 				提示你应该做什么了
			创建了文件
				git add 文件名
				或者
				git add .µ

				git commit -m "备注"

				git push
			修改	同上
			删除
				git add --all
				git commit -m ""
				git push


	2.github上已有项目下载到本地
		进入项目
			点击clone or download
			点击按钮复制地址
		本地打开git bash
			输入
				git clone 地址

	3.创建博客 (https://pages.github.com/ 打开此网站，按上面的步骤就可完成，亲测，可以用)
		名字有要求:
			用户名.github.com
			填写描述
			包含readme
			创建

			点击settings
			填写Custom domain 
				用户名.github.io
				点击save
			点击choose theme
			点击select theme
			点击commit
		域名
		用户名.github.io

		（创建完后打开https://pages.github.com/跟据上面的提示在控制器上输入把原始的页面换成自己的页面）
			然后在本地会生成一个文件  把自己的文件上传上去就OK了


.gitignore 	文件：忽略上传


============================================================
linux命令
	git config -l 				查看配制信息
	git config -e				编辑配制信息
	git help clone   			查看帮助   按f上一页b上一页 q退出帮助文档
	clear 					清屏
	exit 					退出
	cd E: 					切换盘符
	cd 					切换路径
	ls 					查看文件列表
	git mv 文件名 新的文件名			改文件名
	cat	文件名 				读文件内容 		
	vi 	文件名				创建文件（修改文件）
		vi 文件名
			编辑不了，需要进入编辑模式
			按i
			编辑完，退出编辑模式，按ESC	保存	:wq! 		不保存	:q!
	git status 				提示你应该做什么了
	pwd					查看当前文件路径
	pull					更新						
	touch	文件名				创建文件
	echo "内容"> 文件名			创建文件（可以带内容也可以不带）
	echo "添加的内容">> 文件名		修改文件内容
	
	git diff				查看文件改变状态（工作区）
	git diff --staged			查看文件改变状态（暂存区）
	git branch 				查看分支
	git branch 分支名			创建分支
	git branch --merged			列出被合并的分支
	git branch --no-merged 			列出没有被合并的分支 
	
	git tag 				查看tag
	git tag -a v1.1(版本号) -m ""		添加tag
	git show v1.1(版本号)			查看tag信息
	

	
	
	
	

	配置用户名（如果没有配制局部信息会默认使用全局信息  局部配制过了就使用局部信息）
		git config --global user.name "名字"  （不加--global就是局部的）
	配置邮箱
		git config --global user.email "主邮箱"（不加--global就是局部的）

	查看全局的用户名和邮箱 在c盘-》用户->用户名-》.gitconfig文件里面（可以修改）
	
	增强版log （查看日志修改  如果信息过多  按 q  可以退出）
		git log -n  查看第n次的日志
		git log --oneline（格式化了log信息）
		git log --oneline --decorate(查看项目完整的逻辑结构。)
		（配制下面这个  提供版本号前七位  以后就是  git lg  就可以了）
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	
	配制别名：
		局部的
			git config alias.st "status"   以后输入git st  和  git status  效果一样
			git config alias.ci "commit -m" 以后输入 git ci 和 git commit -m 效果一样
			   《《alias.简写名称 "以前的指令 可以包参数（上面的-m就是参数）"》》
		全局的	(加--global)
			git config --global alias.st "status"
	版本回退
		git reset  --hard HEAD^   一个^就是一个版本
		git reset  --hard HEAD	  回退到最高版本
		git reset --hard 版本号   回退到指定版本号
		git reflog   查看所有修改过的版本号（所有的版本都有记录 有的时候返回又清屏了就看不到了 所以这个命令可以看到）
		
		git checkout 文件名	提交时发现文件修改了    但又想返回不修改  就输入   （输入文件夹名就整个文件夹下面的返回）
		git stash	跟git checkout --  但checkout --  返回后就拿不回来了   这个是可以的
		git stash apply	拿回git stash 不要的东西
		
	1.初始化		git init 	多了一个.git（隐藏文件不要乱动）
		查看隐藏文件	cd .git(进入要查看的文件夹)  ls -al
	2.创建文件	touch 文件名
	3.查看文件状态	git status 
		现在文件名应该是红色的
	4.添加到git版本控制中：git add .
		现在文件名应该是绿色的(把文件修改提交到暂存区)
	5.提交代码：git commit -m '备注'（把暂存区的所有内容提交到当前分支）
	
	

	初始化服务器	git init --bare	（创建一个本地版本库）
	下载代码	git clone 地址


苹果上显示隐藏文件命令
	defaults write com.apple.finder AppleShowAllFiles Yes && killall Finder
苹果上隐藏文件命令
	defaults write com.apple.finder AppleShowAllFiles No && killall Finder

==========================================================
代码自动构建工具
grunt 	走文件流
gulp 	走二进制流 			√

安装gulp的命令环境
	npm install gulp-cli -g
安装本地的gulp
	npm install gulp --save

需要创建程序入口
	gulpfile.js

1.需要模块
	gulp-concat 			js文件合并
	gulp-uglify 			js文件压缩
	gulp-rename 			改名字
	del 					删除
2.创建任务task
3.创建默认任务

	gulp运行
