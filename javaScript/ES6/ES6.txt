dir="rtl"	  swiper  改变左右方向
--------------------------交互返回的字符串  转换方法----------------------
				//var json=eval('('+result+')');
				//var json=new Function("return"+result);
				//var json=JSON.parse(result);
				//var json=$.parseJSON(result);



================================2017-2-22 ES6===========================
使用ES6要引入		traceur.js		bootstrap.js
在线编译
https://babeljs.io/repl/
http://google.github.io/traceur-compiler/demo/repl.html

--------------------------ES6 自带模块化-------------------------------
必须引入   traceur.js		bootstrap.js

	a.js里面的内容
		const a=12;
		export default a;	导出
		export default function(){};		//导出可以是function
		export default {};					//也可以是json

--------------------------------------------------------
<script type="module">	//必须写type="module"
	import aMod from 'a.js'导入	//用aMod(名字随意)这个名字去接受a.js这个模块
</script>

--------------------------------------------------------



变量的声明
	let
		声明变量（同一作用域不能重新再声明，再次声明会报错）----值可更改
		块级作用域---> {}   在块级作用域以外是不可以拿到  let  的


常量的声明(常量在后台一般是大写的)
	const
		一经定义-----<同作用域下不可重新定义>，不可修改，(更改会报错)----->
		const a=12;		块级作用域是可以重新在定义的（ 跟外面定义的不是同一东西 ）

--------------------------------------------------------
字符串拼接

	`${变量名},${变量名}`

	let age=12;
    let name='张三';
    let str=`我叫${name},今年${age}`;
    alert(str);

-------------------------------解构赋值--------------------------------------


解构赋值---->作用:解析简单数据,接收返回值
	let [a,b,c]=[12,5,3];
	let [a,b=12]=[12,8];	//---->可以给默认值（如果右边不给默认用左边的）

	let {a,b}={a:12,b:5};---->按json名字走
	let {a,b=12}={a:5};		//---->可以给默认值（如果右边不给默认用左边的）
	var {error,msg} = {error:0,msg:'有问题'};//应用在数据交互应该会比较方便  还没用过 有时间用用


-------------------------------扩展运算符--------------------------------------
扩展运算符
	（引用  对象与对象之间会引用  指向的都是一块空间）（只要是对象都会引用）*
	引用的解决是   去循环一个一个复制
	原生 eg:
		{
            let arr=[1,2,3,4];
            let arr2=[];
            for(let i=0; i<arr.length; i++){
                arr2[i]=arr[i];
            }
            arr.push(8); //------>给arr添加东西arr2不会被引用
            document.write(`arr-->${arr},arr2--->${arr2}`);
        }

    ES6 eg:
	只能应用于数组*
	 var arr=[1,2,3,4]
        var arr2=[...arr];
        arr.push(8);	//------>给arr添加东西arr2不会被引用
        alert(arr2);

        eg:
        let aUl=document.getElementsByTagName('ul');//aUl是个伪数组  不能用数组的方法
        var arr=[...aUl];//用ES6的扩展运算符就OK了



-------------------------------箭头函数--------------------------------------

箭头函数 ---->this就是window    没有arguments(可以用 ...args代替)
	eg:
		show=(a,b)=>a+b;   a+b相当于returnn a+b;
		alert(show(2,5));

	eg:
		show=(a,b)=>{}
			(a,b)		形参参数
			{}			平时function后面的 { }	里面该怎么写就怎么写
			eg:
				show=(...args)=>{
			        var result=0;
			        for(var i=0; i<args.length; i++){
			            result+=args[i];
			        }
		        	return result;

			    }
			    var result=show(2,3,5);
			    alert(result);


--------------------------------------------------------
循环:
	while
	for
	for	in
	for	of
		可以操作数组，但没有索引
		不能操作json
		操作Map对象    也是一种数据结构，相当于json。也是键、值对的。


-------------------------------Map--------------------------------------
Map:
	let map=new Map();
		//设置
        map.set('name','张三');
        map.set('age','18');
        //获取
        let str=map.get('age');
        //删除
        map.delete('age');
        console.log(map);
        	0:{"name" => "张三"}
			1:{"age" => 18}


    for of循环:
        eg:
		    let map=new Map();
		    map.set('name','张三');
		    map.set('age','18');

			for(let i of map){
				//这里的 i 是一个数组  里面存的是名字和值
				alert(i[0]);
			}
			-------------------------------------------------------
		    for(let [key,value] of map){
		        document.write(`key-->${key}<br>value-->${value}<br>`);
		    }
			for(let [key,value] of map.entries()){
				alert(value);
			}
			-------------------------------------------------------
		    map.values()	-->单纯拿value
		    	eg:
					for(let value of map.values()){
						document.write(`${value}<br>`);
					}
		    map.keys()		---->单纯的拿key
		    	eg:
					for(let key of map.keys()){
						document.write(`${key}<br>`);
					}
