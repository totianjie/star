正则：  new RegExp();	var re = new RegExp('规则','选项');		简写：/规则/选项
	1）操作字符串的
	2）表单验证

	----------------------------------------------------------

		var str='gjgasak12421jjjjkldiegi75843jgfdkjd';

		// var re=new RegExp('a','i');
		// console.log(str.search(re));

	简写
		console.log(str.search(/a/i));

	----------------------------------------------------------

	str.search();	查找	有返回位置 没有返回-1
	str.match();	匹配	拿东西出来

	str.replace(str|re,str|fn);	敏感词汇过滤  str.replace(被替换的,替换成谁);
		接收的可以是str或者是正则    替换成谁（可以是个str或者是个函数）

		eg:
				var str='中央中淡上不上了不不晨工一不是不旧一';
				str=str.replace(/中央|一/g,function(res){
					//res  返回的是要替换中的  str
					var tmp='';
					for(var i=0; i<res.length; i++){
						tmp+='*';
					}
					return tmp;
				});
	| 	或者的意思

选项：
	i	Ignore(忽略大小写)
	g 	global(全局匹配) 
	m 	muti-line(多行模式)

修饰：
	^	行首
	$	行尾

量词：	代表数量的东西   量词只能作用于它的前一个
	{几个}	拿多少个
	+		最少1最多不限  把连在一起的拿回来  
		eg:  
			var str='abc12kel123klijkl456kilkjlhu567';
			var arr=str.match(/\d+/g);  //12,123,456,567

	{n} 			有n个
		{n,m} 			最少有n个，最多有m个
		{n,} 			最少有n个，最多不限
		{,m} 			×

		+ 	{1,} 		若干:最少一个，最多不限
		* 	{0,} 		不出现，或者出现几次都行
		? 	{0,1} 		出现一次或者不出现



转义：	
	\ 	改变某个东西的意思
	\n 	换行
	\t 	制表符		文本缩进
	\d 	代表数字		0-9数字

	\w 		[a-zA-Z0-9_] 	所有英文数字 下划线
	\s 						所有空白符号:空格、tab、换行

	\D 		[^0-9] 			除了数字
	\W 		[^a-zA-Z0-9_] 	除了英文数字 下划线
	\S 		 				除了空白符号

	. 						所有字符
							如果想要一个字符串点  '.'  ---->  \. 转义一下

=================================================
	[]
	任选一个
		/a[abc]c/
		aac 			√
		abc 			√
		acc 			√
		aabcc 			×
		/a[abc]{3}c/
		aaaac
		abbbc
		acccc
		aabcc
		aaabc

		/ab+/
		abababababab 	×
		abbbbbbbbbb 	√
		量词只能作用于前一个
	
	分组		() 
		/(ab)+/	
		ababababab 		√
		abababababa 	×
		/a+b+c+/
		abc 			√
		aaaabbbbbcccc	√
		abcabcabc 		×
	范围
		/[a-z]/ 		所有的小写英文字母
		/[A-Z]/ 		所有的大写英文字母
		/[0-9]/ 		所有的数字
		/[a-9]/ 		×
		/[a-zA-Z]/ 		所有的英文字母
		/[a-zA-Z0-9]/ 	所有英文和数字
		/[13-69]/		134569	
	排除 	^方括号中不是行首，是排除
		/[^a-z]/ 		除了小写字母
		/[^0-9]/ 		除了数字
		/[^a-z0-9]/ 	除了小写字母和数字
		/[^a-zA-Z0-9]/ 	除了英文和数字
		/[a-zA-Z^0-9]/ 	×
		^要么不出现，如果出现必须在前面

====================================================
表单验证：
		var str=oT1.value;
		var re=/^1[8-9]|[2-9]\d|100$/;  //定义的规则
		var res=re.test(str);  test返回的是true  和false

====================================================

****正则表达式的方法****
test
	检索字符串中的指定子串，返回布尔值
	/^\d[a-zA-Z]{3}$/.test('1aac') // true

exec
	返回一个数组，数组中的第一个条目是第一个匹配
	/^\d[a-zA-Z]{3}$/.exec('1aac') // ["1aac"]

String可以使用正则表达式的方法
search
	返回子串的开始位置
	'a12b2334c34'.search(/\d{4}/) // 4
match
	返回匹配到的子串
	'a12b2334c34'.match(/\d{4}/) // ["2334"]
replace
	替换匹配到的子串
	'a12b2334c34'.replace(/\d{4}/, 'cccc') // "a12bccccc34"
split
	将字符串分割成数组
	'a12b2334c34'.split(/\d{4}/) // ["a12b", "c34"]

断言
	正向先行断言 (?=exp)
	代表字符串中的一个位置，紧接该位置之后的字符序列能够匹配 exp
	/f(?=234)/.test('123abcf234acd') //true
	负向先行断言(?!exp)
	代表字符串中的一个位置，紧接该位置之后的字符序列不能匹配 exp
	/f(?!234)/.test('123abcf234acd') //false
=======================================================================
常用的正则表达式主要有以下几种：
　　匹配中文字符的正则表达式： [\u4e00-\u9fa5]
　　评注：匹配中文还真是个头疼的事，有了这个表达式就好办了哦
　　获取日期正则表达式：\d{4}[年|\-|\.]\d{1,2}[月|\-|\.]\d{1,2}日?
　　评注：可用来匹配大多数年月日信息。
　　匹配双字节字符(包括汉字在内)：[^\x00-\xff]
　　评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）
　　匹配空白行的正则表达式：\n\s*\r
　　评注：可以用来删除空白行
　　匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?</>|<.*? />
　　评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力
　　匹配首尾空白字符的正则表达式：^\s*|\s*$
　　评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式
　　匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
　　评注：表单验证时很实用
　　匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*
　　评注：网上流传的版本功能很有限，上面这个基本可以满足需求
　　匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
　　评注：表单验证时很实用
　　匹配国内电话号码：\d{4}-\d{7}|\d{3}-\d{8}
　　评注：匹配形式如 0511-4405222 或 021-87888822
　　匹配腾讯QQ号：[1-9][0-9]\{4,\}
　　评注：腾讯QQ号从10000开始
　　匹配中国邮政编码：[1-9]\d(?!\d)
　　评注：中国邮政编码为6位数字
　　匹配身份证：\d{17}[\d|X]|\d{15}
　　评注：中国的身份证为15位或18位
　　匹配ip地址：((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。
　　评注：提取ip地址时有用
　　匹配特定数字：
　　^[1-9]\d*$　//匹配正整数
　　^-[1-9]\d*$ //匹配负整数
　　^-?[1-9]\d*$　//匹配整数
　　^[1-9]\d*|0$　//匹配非负整数（正整数 + 0）
　　^-[1-9]\d*|0$　//匹配非正整数（负整数 + 0）
　　^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　//匹配正浮点数
　　^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　//匹配负浮点数
　　^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　//匹配浮点数
　　^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　//匹配非负浮点数（正浮点数 + 0）
　　^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　//匹配非正浮点数（负浮点数 + 0）
　　评注：处理大量数据时有用，具体应用时注意修正
　　匹配特定字符串：
　　^[A-Za-z]+$　//匹配由26个英文字母组成的字符串
　　^[A-Z]+$　//匹配由26个英文字母的大写组成的字符串
　　^[a-z]+$　//匹配由26个英文字母的小写组成的字符串
　　^[A-Za-z0-9]+$　//匹配由数字和26个英文字母组成的字符串
　　^\w+$　//匹配由数字、26个英文字母或者下划线组成的字符串
　　评注：最基本也是最常用的一些表达式

