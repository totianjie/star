/*!

 @Title: layui.upload 单文件上传 - 全浏览器兼容版
 @Author: 贤心
 @License：LGPL

 */
layui.define("layer",
function(e) {
    var f = layui.jquery;
    var g = layui.layer;
    var b = layui.device();
    var a = "layui-upload-enter";
    var h = "layui-upload-iframe";
    g.config({
        extend: "skin.css",
        skin: "layer-ext-moon"
    });
    var d = {
        icon: 2,
        shift: 6
    },
    i = {
        file: "文件",
        video: "视频",
        audio: "音频"
    };
    var c = function(j) {
        this.options = j
    };
    c.prototype.init = function() {
        var n = this,
        k = n.options;
        var j = f("body"),
        m = f(k.elem || ".layui-upload-file");
        var l = f('<iframe id="' + h + '" class="' + h + '" name="' + h + '"></iframe>');
        f("#" + h)[0] || j.append(l);
        return m.each(function(o, r) {
            r = f(r);
            var q = '<form target="' + h + '" method="' + (k.method || "post") + '" key="set-mine" enctype="multipart/form-data" action="' + (k.url || "") + '"></form>';
            var p = r.attr("lay-type") || k.type;
            if (!k.unwrap) {
                q = '<div class="layui-box layui-upload-button">' + q + "</div>"
            }
            q = f(q);
            if (!k.unwrap) {
                q.on("dragover",
                function(s) {
                    s.preventDefault();
                    f(this).addClass(a)
                }).on("dragleave",
                function() {
                    f(this).removeClass(a)
                }).on("drop",
                function() {
                    f(this).removeClass(a)
                })
            }
            if (r.parent("form").attr("target") === h) {
                if (k.unwrap) {
                    r.unwrap()
                } else {
                    r.parent().next().remove();
                    r.unwrap().unwrap()
                }
            }
            r.wrap(q);
            r.off("change").on("change",
            function() {
                n.action(this, p)
            })
        })
    };
    c.prototype.action = function(p, o) {
        var n = this,
        r = n.options,
        l = p.value;
        var q = f(p),
        k = q.attr("lay-ext") || r.ext || "";
        if (!l) {
            return
        }
        switch (o) {
        case "file":
            if (k && !RegExp("\\w\\.(" + k + ")$", "i").test(escape(l))) {
                g.msg("不支持该文件格式", d);
                return p.value = ""
            }
            break;
        case "video":
            if (!RegExp("\\w\\.(" + (k || "avi|mp4|wma|rmvb|rm|flash|3gp|flv") + ")$", "i").test(escape(l))) {
                g.msg("不支持该视频格式", d);
                return p.value = ""
            }
            break;
        case "audio":
            if (!RegExp("\\w\\.(" + (k || "mp3|wav|mid") + ")$", "i").test(escape(l))) {
                g.msg("不支持该音频格式", d);
                return p.value = ""
            }
            break;
        default:
            console.log(r.size);
            console.log(p);
            console.log(p.files[0]);
            if (!RegExp("\\w\\.(" + (k || "jpg|png|gif|bmp|jpeg") + ")$", "i").test(escape(l))) {
                g.open({
                    area: ["350px", "220px"],
                    autoCloseAll: false,
                    content: "不支持该图片格式"
                });
                return p.value = ""
            }else if(r.size && p.files[0].size > eval(r.size)) {
                g.open({
                    btn: ['确定'],
                    title: '温馨提示',
                    content: '图片不能大于' + r.size.split('*')[0] + 'M'
                });
                return p.value = '';
            }
            break
        }
        r.before && r.before(p);
        q.parent().submit();
        var m = f("#" + h),
        j = setInterval(function() {
            var s;
            try {
                s = m.contents().find("body").text()
            } catch(t) {
                g.msg("上传接口存在跨域", d);
                clearInterval(j)
            }
            if (s) {
                clearInterval(j);
                m.contents().find("body").html("");
                try {
                    s = JSON.parse(s)
                } catch(t) {
                    s = {};
                    return g.msg("请对上传接口返回JSON字符", d)
                }
                typeof r.success === "function" && r.success(s, p)
            }
        },
        30);
        p.value = ""
    };
    e("upload",
    function(k) {
        var j = new c(k = k || {});
        j.init()
    })
});