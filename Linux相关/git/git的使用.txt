下载项目
	git clone
查看修改项
	git status
提交
	git add . 和git commit -m "备注"  （git commit -a -m "备注"  ）
切换到主分支
	git checkout develp
在主分去上拉取最新代码
	git pull --ff
然后切换到自己分去上
	git checkout feature
然后把自己分去代码跟主分去和并
	git rebase develop
然后在切换到主分去
	git checkout develop
然后在主分去上和并自己分支上的代码
	git merge --no-ff feature
然后
	git push

分支管理
	git branch -a				查看所有分支
	git branch 分支名			创建分去
	git branch -d 分支名			删除分支（-D强制删除）
	git push origin 分支名			创建远程分支
	git push origin --delete 分支名		删除远程分支
	git checkout -b 分支名 origin/分支名	创建并切换本地分支 并并联远程分去
	git branch --set-upstream-to=origin dev	本地分支关联远程dev分支
	


linux命令
	git config -l 				查看配制信息
	git config -e				编辑配制信息
	git help clone   			查看帮助   按f上一页b上一页 q退出帮助文档
	clear 					清屏
	exit 					退出
	cd E: 					切换盘符
	cd 					切换路径
	ls 					查看文件列表
	git mv 文件名 新的文件名			改文件名
	cat	文件名 				读文件内容 		
	vi 	文件名				创建文件（修改文件）
		vi 文件名
			编辑不了，需要进入编辑模式
			按i
			编辑完，退出编辑模式，按ESC	保存	:wq! 		不保存	:q!
	git status 				提示你应该做什么了
	pwd					查看当前文件路径
	pull					更新						
	touch	文件名				创建文件
	echo "内容"> 文件名			创建文件（可以带内容也可以不带）
	echo "添加的内容">> 文件名		修改文件内容
	
	git diff				查看文件改变状态（工作区）
	git diff --staged			查看文件改变状态（暂存区）
	git branch 				查看分支
	git branch 分支名			创建分支
	git branch --merged			列出被合并的分支
	git branch --no-merged 			列出没有被合并的分支 
	
	git tag 				查看tag
	git tag -a v1.1(版本号) -m ""		添加tag
	git show v1.1(版本号)			查看tag信息
	

	
	
	
	

	配置用户名（如果没有配制局部信息会默认使用全局信息  局部配制过了就使用局部信息）
		git config --global user.name "名字"  （不加--global就是局部的）
	配置邮箱
		git config --global user.email "主邮箱"（不加--global就是局部的）

	查看全局的用户名和邮箱 在c盘-》用户->用户名-》.gitconfig文件里面（可以修改）
	
	增强版log （查看日志修改  如果信息过多  按 q  可以退出）
		git log -n  查看第n次的日志
		git log --oneline（格式化了log信息）
		git log --oneline --decorate(查看项目完整的逻辑结构。)
		（配制下面这个  提供版本号前七位  以后就是  git lg  就可以了）
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	
	配制别名：
		局部的
			git config alias.st "status"   以后输入git st  和  git status  效果一样
			git config alias.ci "commit -m" 以后输入 git ci 和 git commit -m 效果一样
			   《《alias.简写名称 "以前的指令 可以包参数（上面的-m就是参数）"》》
		全局的	(加--global)
			git config --global alias.st "status"
	版本回退
		git reset  --hard HEAD^   一个^就是一个版本
		git reset  --hard HEAD	  回退到最高版本
		git reset --hard 版本号   回退到指定版本号
		git reflog   查看所有修改过的版本号（所有的版本都有记录 有的时候返回又清屏了就看不到了 所以这个命令可以看到）
		
		git checkout 文件名	提交时发现文件修改了    但又想返回不修改  就输入   （输入文件夹名就整个文件夹下面的返回）
		git stash	跟git checkout --  但checkout --  返回后就拿不回来了   这个是可以的
		git stash apply	拿回git stash 不要的东西
		
	1.初始化		git init 	多了一个.git（隐藏文件不要乱动）
		查看隐藏文件	cd .git(进入要查看的文件夹)  ls -al
	2.创建文件	touch 文件名
	3.查看文件状态	git status 
		现在文件名应该是红色的
	4.添加到git版本控制中：git add .
		现在文件名应该是绿色的(把文件修改提交到暂存区)
	5.提交代码：git commit -m '备注'（把暂存区的所有内容提交到当前分支）
	
	

	初始化服务器	git init --bare	（创建一个本地版本库）
合并（有分叉）
	切换到主分支
		git checkout develp
	在主分去上拉取最新代码
		git pull --ff
	然后切换到自己分去上
		git checkout feature
	然后把自己分去代码跟主分去和并
		git rebase develop
	然后在切换到主分去
		git checkout develop
	然后在主分去上和并自己分支上的代码
		git merge --no-ff feature
	

别一种合并方式（没有分叉）
	
	test分支（添加修改了文件）
		git add .	git commit -m ""	切换到主分支 git checkout master
	master分支（主分支  添加修改了内容）
		git add . 	git commit -m "" 	
		git rebase master test(重写test分支--会跳到test分支)	git checkout master(切换到主分支)
		git merge test (合并完成了)（这样合并出来的不会有分叉 是在一条直线上的  git lg 可以看到）
		



Git自学成才——新建远程分支和删除
	新建分支
	git checkout -b 分支名
	把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）：
	git push origin dbg_lichen_star:dbg_lichen_star



删除远程分支

	我比较喜欢的简单方式，推送一个空分支到远程分支，其实就相当于删除远程分支：
	git push origin :dbg_lichen_star
	也可以使用：
	git push origin --delete dbg_lichen_star
	








	